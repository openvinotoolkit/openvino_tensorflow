diff --git a/src/frontends/tensorflow/src/op/pack.cpp b/src/frontends/tensorflow/src/op/pack.cpp
index 958d434f5..6fb0bb39f 100644
--- a/src/frontends/tensorflow/src/op/pack.cpp
+++ b/src/frontends/tensorflow/src/op/pack.cpp
@@ -14,7 +14,7 @@ namespace tensorflow {
 namespace op {
 
 OutputVector translate_pack_op(const NodeContext& node) {
-    auto axis = node.get_attribute<int32_t>("axis");
+    auto axis = node.get_attribute<int64_t>("axis");
     auto axis_const = make_shared<Constant>(element::i64, Shape{}, axis);
 
     OutputVector concat_inputs;
@@ -30,4 +30,4 @@ OutputVector translate_pack_op(const NodeContext& node) {
 }  // namespace op
 }  // namespace tensorflow
 }  // namespace frontend
-}  // namespace ov
\ No newline at end of file
+}  // namespace ov
diff --git a/src/frontends/tensorflow/src/op/strided_slice.cpp b/src/frontends/tensorflow/src/op/strided_slice.cpp
index c48d97036..21b2363e4 100644
--- a/src/frontends/tensorflow/src/op/strided_slice.cpp
+++ b/src/frontends/tensorflow/src/op/strided_slice.cpp
@@ -19,11 +19,11 @@ OutputVector translate_strided_slice_op(const NodeContext& node) {
     auto end = node.get_input(2);
     auto strides = node.get_input(3);
 
-    auto begin_mask = node.get_attribute<int32_t>("begin_mask");
-    auto end_mask = node.get_attribute<int32_t>("end_mask");
-    auto new_axis_mask = node.get_attribute<int32_t>("new_axis_mask");
-    auto ellipsis_mask = node.get_attribute<int32_t>("ellipsis_mask");
-    auto shrink_axis_mask = node.get_attribute<int32_t>("shrink_axis_mask");
+    auto begin_mask = node.get_attribute<int64_t>("begin_mask");
+    auto end_mask = node.get_attribute<int64_t>("end_mask");
+    auto new_axis_mask = node.get_attribute<int64_t>("new_axis_mask");
+    auto ellipsis_mask = node.get_attribute<int64_t>("ellipsis_mask");
+    auto shrink_axis_mask = node.get_attribute<int64_t>("shrink_axis_mask");
 
     auto mask_to_vec = [](int32_t mask) {
         auto length = sizeof(mask) * CHAR_BIT;
diff --git a/src/frontends/tensorflow/src/utils.hpp b/src/frontends/tensorflow/src/utils.hpp
index a224e81df..e17c3a8dd 100644
--- a/src/frontends/tensorflow/src/utils.hpp
+++ b/src/frontends/tensorflow/src/utils.hpp
@@ -93,7 +93,8 @@ void values_from_const_node(const NodeContext& node, ov::Shape* const_tensor_sha
     TENSORFLOW_OP_VALIDATION(node, node.get_op_type() == "Const", "Node is expected to be Constant.");
     const auto* decoder = node.get_decoder();
     auto dt = decoder->get_native_attribute("dtype").as<::tensorflow::DataType>();
-    auto tensor_proto = decoder->get_native_attribute("value").as<::tensorflow::TensorProto>();
+    ov::Any any = decoder->get_native_attribute("value");
+    auto tensor_proto = any.as<::tensorflow::TensorProto>();
     const ::tensorflow::TensorShapeProto& shape = tensor_proto.tensor_shape();
     ov::PartialShape pshape;
     tf_shape_to_ov_shape(shape, &pshape);
